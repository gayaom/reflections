When would you want to use a remote repository rather than keeping all your work local?
First thing is, its a good way to keep back up of my files. Most frequently I use this when I collaborate with other people on a project.
I also use them when I want to share my code with someone by making it public.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
If I am working on a code, it is better if I update my local repository rather than automatically happening. Sometimes I am not sure about code I am working on and dont want to mess my local code as well.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
 Branches: Branches happen on a single repository. We use branches when we want to try out a new experimental feature that you are still not sure will work but still want to have a working demo to show what you are working on.
Clones: Clones work on any two repositories. Cloning involves taking an existing repository and making one just like it. The original repository could be either remote or local.
Forks: Forking is only used within the context of GitHub, taking an existing GitHub repository and making a copy of it.

What is the benefit of having a copy of the last known state of the remote stored locally?
It enables us to keep the state of remote in your hand while working  in your local machine especially when offline. Getting everything up-to-date can be done first by merging your local copy with local remote and then second is push the changes to github.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

If I had to collaborate on a coding project without using Git or GitHub (or any other form of version control designed for code), I might suggest that we all make changes to a shared folder, for example, a DropBox folder.  This would be a ligter-weight solution than using Git and GitHub.  However, if we both wanted to work on the same part of the file, it would be very difficult
 to avoid clobbering each other's changes.
Real-time collaborative editors like Google Docs are also great for collaboration, but I don't know a good version of Google Docs for code. Even if I did, I would be hesitant to use this approach on code that it's important to keep bug-free.  I would be worried that someone else would add a change that combined with my change to make a bug, and I might not even notice their change!

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Using branches is very useful to keep track of which changes have already been reviewed and approved when working with a large group.
 Working in a separate branch ensures that your master branch is always kept in a working state. You can try and experiment new
 functionality or algorithm in the new branch untill you are sure it works without breaking anything.